@mixin screen($size) {
	$desktop: "(min-width: 1025px)";
	$nonDesktop: "(max-width: 1024px)";
	
	$tablet: "(min-width: 768px) and (max-width: 1024px)";
	$tablet-portrait: '(min-width: 768px) and (max-width: 1024px) and (orientation: portrait)';
	
	$mobile: "(max-width: 767px)";
	$mobileCustom: "(max-width: 1023px)";

	$mobile-landscape: '(max-width: 767px) and (orientation: landscape)';
	$nonMobile: "(min-width: 768px)";
	
	$specialMobileView: "(max-width: 1199px)";
	
	@if $size == desktop {
		@media only screen and #{$desktop} {
			@content;
		}
	} @else if $size == nonDesktop {
		@media only screen and #{$nonDesktop} {
			@content;
		}
	} @else if $size == tablet {
		@media only screen and #{$tablet} {
			@content;
		}
	} @else if $size == tablet-portrait {
		@media only screen and #{$tablet-portrait} {
			@content;
		}
	} @else if $size == mobile {
		@media only screen and #{$mobile} {
			@content;
		}
	} @else if $size == mobileCustom {
		@media only screen and #{$mobileCustom} {
			@content;
		}
	} @else if $size == mobile-landscape {
		@media only screen and #{$mobile-landscape} {
			@content;
		}
	} @else if $size == nonMobile {
		@media only screen and #{$nonMobile} {
			@content;
		}
	} @else if $size == specialMobileView {
		@media only screen and #{$specialMobileView} {
			@content;
		}
	} @else {
		@media only screen and #{$size} {
			@content;
		}
	}
}

//USAGE
//.wrapper {
//	margin: 0 auto;
//	width: 100%;
//	@include screen('tablet') {
//		width: 90%;
//	}
//	@include screen('desktop') {
//		width: 85%;
//	}
//}
//.wrapper {
//	@include screen('(min-width: 1367px)') {
//		width: 1280px;
//	}
//}

@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {
		@content;
	}
}

@mixin position($position, $args) {
	@each $o in top right bottom left {
		$i: index($args, $o);
		@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
			#{$o}: nth($args, $i + 1);
		}
	}
	position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
	@include position(absolute, $args);
}

@mixin fixed($args: '') {
	@include position(fixed, $args);
}

@mixin relative($args: '') {
	@include position(relative, $args);
}

@mixin center() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin centerX() {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}

@mixin centerY() {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}


//USAGE
//.menu li {
//	@include relative;
//}
//.sub-menu {
//	@include absolute(top 100% left 0);
//}
//.sticky-bar {
//	@include fixed(top 0 left 0);
//}


@mixin clearfix {
	&:before,
	&:after {
		display: table;
		content: "";
	}
	
	&:after {
		clear: both;
	}
}

@mixin no-drag {
	-webkit-user-drag: none;
	-khtml-user-drag: none;
	-moz-user-drag: none;
	-o-user-drag: none;
	user-drag: none;
}

@mixin nl {
	margin: 0;
	padding: 0;
	text-indent: 0;
	list-style: none;
	list-style-position: outside;
}

@mixin selection {
	& ::selection {
		@content;
	}
	& ::-moz-selection {
		@content;
	}
}

@mixin placeholder-color($color) {
	&.placeholder {
		color: $color;
	}
	&::-moz-placeholder {
		color: $color;
	}
	&::-webkit-input-placeholder {
		color: $color;
	}
}

@mixin unselectable() {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

// USAGE: @include font-size(14px) => font-size: 14px; font-size: 0.8rem;
@function calculateRem($size) {
	$remSize: $size / 16px; // 16px is a $base unit
	@return $remSize * 1rem;
}

@mixin font-size($size) {
	font-size: $size;
	font-size: calculateRem($size);
}
